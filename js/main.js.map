{"version":3,"sources":["main.js"],"names":["log","console","bind","supportsCustomElementsV1","window","logScreen","message","d","Date","ul","document","getElementById","li","createElement","appendChild","createTextNode","toLocaleString","onerror","msg","url","lineNo","columnNo","error","string","toLowerCase","substring","indexOf","JSON","stringify","join","loadScript","callback","head","getElementsByTagName","script","type","src","onload","upgrade","HelloWorld","element","_logMessage","style","cursor","addEventListener","onSubmit","removeEventListener","oldDocument","newDocument","attr","oldValue","newValue","render","getAttribute","querySelector","innerHTML","name","e","preventDefault","value","val","setAttribute","customElements","define","whenDefined","then","hw1","domStr","hw2","reason"],"mappings":"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","file":"main.js","sourcesContent":["\r\n\"use strict\";\r\n\r\n// shortcut for easier console logging\r\nconst log = console.log.bind(console);\r\n\r\n// check for native support for custom elements V1\r\nconst supportsCustomElementsV1 = 'customElements' in window;\r\n\r\n// global helper method to log diagnostic information on screen,\r\n// since it's not easy to check console messages on devices\r\nfunction logScreen(message) {\r\n  var d = new Date();\r\n  var ul = document.getElementById(\"screen_log\");\r\n  var li = document.createElement(\"li\");\r\n  li.appendChild(document.createTextNode(d.toLocaleString() + ' : ' + message));\r\n  ul.appendChild(li);\r\n}\r\n\r\n// catch all global unhandled error and print them on screen,\r\n// so that errors become visible on devices without a console\r\nwindow.onerror = function (msg, url, lineNo, columnNo, error) {\r\n    var string = msg.toLowerCase();\r\n    var substring = \"script error\";\r\n    if (string.indexOf(substring) > -1){\r\n        logScreen('Script Error: See Browser Console for Detail');\r\n    } else {\r\n        var message = [\r\n            'Message: ' + msg,\r\n            'URL: ' + url,\r\n            'Line: ' + lineNo,\r\n            'Column: ' + columnNo,\r\n            'Error object: ' + JSON.stringify(error)\r\n        ].join(' - ');\r\n\r\n        logScreen(message);\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n// helper function to dynamically load a JS script in the\r\n// current document. Not using promises here to keep it\r\n// simple and robust across browsers.\r\nfunction loadScript(url, callback)\r\n{\r\n    // Adding the script tag to the head as suggested before\r\n    var head = document.getElementsByTagName('head')[0];\r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = url;\r\n\r\n    // Then bind the event to the callback function.\r\n    // There are several events for cross browser compatibility.\r\n    script.onload = callback;\r\n\r\n    // Fire the loading\r\n    head.appendChild(script);\r\n}\r\n\r\n// Let's do this...\r\nlogScreen('Start.');\r\nlogScreen('Checking native support for custom elements V1....');\r\n\r\n// Lazy load the polyfill if necessary.\r\nif (!supportsCustomElementsV1) {\r\n  // no native support, load polyfill\r\n  logScreen('Native support not available, loading polyfil...');\r\n  loadScript('js/poly/custom-elements.min.js',function() {\r\n    logScreen('Polyfill loaded.');\r\n    upgrade();\r\n  });\r\n} else {\r\n  // native support, carry on\r\n  logScreen('Native support detected.');\r\n  upgrade();\r\n}\r\n\r\nfunction upgrade() {\r\n\r\n// Example of a custom element class, containing\r\n// \"reactions\" (lifecycle methods) as well as custom\r\n// properties and event handlers\r\nclass HelloWorld extends HTMLElement {\r\n\r\n    constructor(element) {\r\n\r\n      // Always call super first in constructor\r\n      super();\r\n\r\n      // we can't do much in the constructor, really:\r\n      // - Don’t add, remove, mutate, or access any attribute inside a constructor\r\n      // - Don’t insert, remove, mutate, or access a child\r\n      // source: https://webkit.org/blog/7027/introducing-custom-elements/\r\n    }\r\n\r\n    connectedCallback() {\r\n\r\n      // Called when the custom element is inserted into a document\r\n      // this is a safe place to do instance-specific things like\r\n      // setting component-level variables or event handlers\r\n\r\n      this._logMessage('ConnectedCallback called.');\r\n\r\n      // example of setting an inner style via JS\r\n      // will be visible in DOM as inline style\r\n      // in a way, this is \"scoped styles\", a term used in\r\n      // several frameworks\r\n      this.style.cursor = 'pointer';\r\n\r\n      // example of an internal event listener\r\n      this.addEventListener('submit', this.onSubmit);\r\n\r\n    }\r\n\r\n    disconnectedCallback() {\r\n\r\n      // Called when the custom element is removed from the document\r\n      // clean up any event handlers added in connectedCallback here...\r\n\r\n      this._logMessage('DisconnectedCallback called.');\r\n      this.removeEventListener('submit', this.onSubmit);\r\n\r\n    }\r\n\r\n    adoptedCallback(oldDocument, newDocument) {\r\n\r\n      // Called when the custom element is adopted from an old document to a new document.\r\n      // I have no idea what this means\r\n\r\n      this._logMessage('AdoptedCallback called.');\r\n    }\r\n\r\n    static get observedAttributes() {\r\n\r\n      // The million dollar feature of the custom elements V1 API\r\n      // in this API method, you declare the attributes to watch\r\n      // in case any change happens to that attribute,\r\n      // attributeChangedCallback will be called.\r\n      // effectively, this allows for super easy synchronization\r\n      // between the DOM and the API\r\n\r\n      // let's watch our name attribute\r\n      // this means that when it changed in markup or via the API,\r\n      // the change will be detected\r\n\r\n      return ['name'];\r\n    }\r\n\r\n    attributeChangedCallback(attr, oldValue, newValue) {\r\n\r\n     // Called anytime any of our watched attributes changes\r\n     // We'll call our own custom method Render in case this happens\r\n\r\n     this._logMessage('AttributeChangedCallback called.');\r\n     this.render();\r\n    }\r\n\r\n    get name() {\r\n\r\n      // a getter for an attribute, [name] in this case\r\n      // accessing this via element.name will always return the\r\n      // most up-to-date value\r\n\r\n      this._logMessage('Name getter called');\r\n      return this.getAttribute('name');\r\n    }\r\n\r\n    set name(val) {\r\n\r\n      // a setter for an attribute, [name] in this case\r\n      // setting this via element.name will trigger\r\n      // attributeChangedCallback, which will update\r\n      // both the internal value and the DOM\r\n\r\n      if (val) {\r\n        this.setAttribute('name', val);\r\n      }\r\n      this._logMessage('Name setter called: ' + val);\r\n    }\r\n\r\n    _logMessage(message) {\r\n\r\n      // Not part of API. Just a custom internal helper method to log component-instance specific\r\n      // messages for the sake of diagnostics. the _methodname suggests\r\n      // that this is a private method, but this is only a convention\r\n      // private methods do not exist in JS classes.\r\n\r\n      var d = new Date();\r\n      var li = document.createElement(\"li\");\r\n      li.appendChild(document.createTextNode(this.getAttribute('id') + ' : ' + d.toLocaleString() + ' : ' + message));\r\n      this.querySelector('.log').appendChild(li);\r\n    }\r\n\r\n    render() {\r\n\r\n      // Not part of API. A single custom render method which is called\r\n      // whenever a watched attribute is changed. It will update part of\r\n      // the custom element's DOM based on the latest attribute value\r\n\r\n      this.querySelector('.name').innerHTML = this.name;\r\n      this._logMessage('Render called.');\r\n    }\r\n\r\n    onSubmit(e) {\r\n\r\n      // Not part of API. A custom event handler specific to our component\r\n      // instance. This will receive any form submit events of the instance\r\n      // We'll read the name value from the form, and then simply do\r\n      // this.name = value.\r\n      // Since we have centralized our rendering, this event handler\r\n      // does not need to know anything about HOW to render this change.\r\n\r\n      this._logMessage('Submit handler called.');\r\n      e.preventDefault();\r\n      this.name = this.querySelector('.nameField').value;\r\n    }\r\n\r\n  }\r\n\r\n  // custom element class defined, let's upgrade it...\r\n  logScreen('Starting upgrade...');\r\n\r\n  customElements.define('hello-world', HelloWorld);\r\n\r\n  // do stuff with some custom elements, but only when they are\r\n  // succesfully defined...\r\n  customElements.whenDefined('hello-world').then(function(value) {\r\n\r\n    logScreen('Upgrade successful!');\r\n\r\n    logScreen('Updating name of instance 2 via JS...');\r\n\r\n    // get handle to existing instance of hello-world in DOM and change its name\r\n    let hw1 = document.querySelector('#hw2');\r\n\r\n    // check out how powerful this is. the consuming code only has to set a property\r\n    // and has no knowledge at all how to render such a change, we encapsulated\r\n    // all of that in the custom elements code\r\n    hw1.name = \"Upgraded world (JS)!\";\r\n\r\n\r\n    logScreen('Creating instance 3 from JS...');\r\n\r\n    // Next, we're going to create an instance of our custom elements completely from\r\n    // JS and insert it into the DOM. This can be done from a handlebars template,\r\n    // HTML5 template elements, or just a multiline string like below...\r\n    let domStr = `\r\n      <p>Hello, <span class=\"name\">World!</span></p>\r\n      <form class=\"frm\" action=\"\" method=\"post\" accept-charset=\"UTF-8\">\r\n        <input type=\"text\" class=\"nameField\" value=\"\" />\r\n        <input type=\"submit\" value=\"submit\" />\r\n      </form>\r\n      <ul class=\"log\">\r\n        <li>DOM init</li>\r\n      </ul>\r\n    `;\r\n    //\r\n\r\n    // create it\r\n    let hw2 = new HelloWorld();\r\n    hw2.innerHTML = domStr;\r\n    hw2.setAttribute('id','hw3');\r\n    hw2.setAttribute('name','DOM created world!');\r\n    document.querySelector(\"#instances\").appendChild(hw2);\r\n    // change a property after DOM creation to see if it reflects.\r\n    hw2.name = \"DOM created world (JS)!\";\r\n\r\n    logScreen('End.');\r\n\r\n\r\n  }, function(reason) {\r\n    logScreen('Upgrade failed: ' + reason);\r\n    logScreen('End.');\r\n  });\r\n\r\n}\r\n"]}